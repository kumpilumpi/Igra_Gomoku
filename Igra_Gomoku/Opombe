Opombe:
INTELIGENCA
	
	- Alfabeta ne zaključuje igre če ima zagotovljeno zmago.
	- AlfaBeta ima samo en cutoff( ko alfa >= beta) ??
	- KO ima zagotovlejno zmago poraz igra kr nekaj
	- Še dodaten krajši koordinati seznam, ko je veliko potez, da igra hitreje.
		- Za kandidate le okolica zadnjih treh potez?? pa povečamo globino.
		- posebej ocenit 4 v vrsto z dvema praznima 
	






	
	
//========== prejšna metoda iskanja pet v vrsto




public boolean pomozna (int v0, int s0, int dv, int ds, Polje primerjava) {
	/**
	 * v0 - začetna vrstica / s0 - zacetni stolpec / dv - sprememba vrstica / ds sprememba stolpca / kdo - za kogar preverja ali je pet v vrsto
	 * Preveri če se od danega indeksa v devetih korakih v dani smeri pojavi 5 v vrsto
	 */
		
		int zaporedni = 0; //steje kolikokrat se zaporedoma pojavi iskano polje
		
		for( int i = 0; i < 9; i++ ) {
			
			try {
				if(plosca[v0 + i*dv][s0 + i*ds].equals(primerjava)) {
					++zaporedni;
				}else{
					if(zaporedni > 4) {
						return true;
					}else{
						zaporedni = 0;
					}
				}
			}catch(IndexOutOfBoundsException e){
				continue;
			}
		}
		return (zaporedni > 4) ? true : false;
	}
		
	
	public boolean petVrsta() {
		/**
		 * Preveri, če je zadnja odigrana poteza postavila pet v vrsto
		 */
		
		Koordinati poteza = odigranePoteze.getLast();
		
		int v0 = poteza.getY();
		int s0 = poteza.getX();
		Polje primerjava = plosca[poteza.getY()][poteza.getX()];
		
		//stolpec : zacetek (-4,0) sprememba (1,0)
		if (pomozna(v0 - 4, s0, 1, 0, primerjava)) { 	// Kordinati.Y -> Vrstica
			//System.out.print(false);
			return true;			
		}
		//vrstica : zacetek (0,-4) spermemba (0,1)
		if (pomozna(v0, s0 -4, 0, 1, primerjava)) {
			return true;			
		}
		//leva diagonala : zacetek (-4,-4) sprememba (1,1)
		if (pomozna(v0 - 4, s0 - 4, 1, 1, primerjava)) {
			return true;			
		}
		//desna diagonala : zecetek (-4,4) sprememba (1,-1)
		if (pomozna(v0 - 4, s0 + 4, 1, -1, primerjava)) {
			return true;			
		}
		else {
			return false;
		}		
	}
	
	